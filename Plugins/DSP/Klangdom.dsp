declare name        "objMatrixKlangdom"; // modifier le nom de votre greffon
declare version     "1.0";
declare author      "D.Blanchemain";
declare license     "BSD";
declare copyright   "(c)D.Blanchemain 2020";
import("stdfaust.lib");
Matrix(N,M) =_*cdistance:filter:transpose:delay:freeverb<: par(out, M, *(Fader(1,out): si.smoo)) :> par(out, M, _)
with {
tabSpeakerX(0)=-0.002;
tabSpeakerY(0)=-0.562;
tabSpeakerZ(0)=-1.000;
tabSpeakerD(0)=1.147;
tabSpeakerX(1)=-0.585;
tabSpeakerY(1)=-0.562;
tabSpeakerZ(1)=-0.914;
tabSpeakerD(1)=1.222;
tabSpeakerX(2)=-1.000;
tabSpeakerY(2)=-0.562;
tabSpeakerZ(2)=-0.646;
tabSpeakerD(2)=1.317;
tabSpeakerX(3)=-1.000;
tabSpeakerY(3)=-0.562;
tabSpeakerZ(3)=-0.202;
tabSpeakerD(3)=1.165;
tabSpeakerX(4)=-1.000;
tabSpeakerY(4)=-0.562;
tabSpeakerZ(4)=0.237;
tabSpeakerD(4)=1.171;
tabSpeakerX(5)=-1.000;
tabSpeakerY(5)=-0.562;
tabSpeakerZ(5)=0.677;
tabSpeakerD(5)=1.332;
tabSpeakerX(6)=-0.516;
tabSpeakerY(6)=-0.562;
tabSpeakerZ(6)=1.000;
tabSpeakerD(6)=1.258;
tabSpeakerX(7)=-0.002;
tabSpeakerY(7)=-0.562;
tabSpeakerZ(7)=1.000;
tabSpeakerD(7)=1.147;
tabSpeakerX(8)=0.472;
tabSpeakerY(8)=-0.562;
tabSpeakerZ(8)=1.000;
tabSpeakerD(8)=1.240;
tabSpeakerX(9)=1.000;
tabSpeakerY(9)=-0.562;
tabSpeakerZ(9)=0.667;
tabSpeakerD(9)=1.327;
tabSpeakerX(10)=1.000;
tabSpeakerY(10)=-0.562;
tabSpeakerZ(10)=0.354;
tabSpeakerD(10)=1.200;
tabSpeakerX(11)=1.000;
tabSpeakerY(11)=-0.562;
tabSpeakerZ(11)=-0.152;
tabSpeakerD(11)=1.157;
tabSpeakerX(12)=1.000;
tabSpeakerY(12)=-0.562;
tabSpeakerZ(12)=-0.606;
tabSpeakerD(12)=1.297;
tabSpeakerX(13)=0.442;
tabSpeakerY(13)=-0.562;
tabSpeakerZ(13)=-0.737;
tabSpeakerD(13)=1.027;
tabSpeakerX(14)=-0.358;
tabSpeakerY(14)=0.002;
tabSpeakerZ(14)=-0.742;
tabSpeakerD(14)=0.824;
tabSpeakerX(15)=-0.714;
tabSpeakerY(15)=0.002;
tabSpeakerZ(15)=-0.540;
tabSpeakerD(15)=0.895;
tabSpeakerX(16)=-0.699;
tabSpeakerY(16)=0.002;
tabSpeakerZ(16)=-0.207;
tabSpeakerD(16)=0.729;
tabSpeakerX(17)=-0.709;
tabSpeakerY(17)=0.002;
tabSpeakerZ(17)=0.121;
tabSpeakerD(17)=0.719;
tabSpeakerX(18)=-0.709;
tabSpeakerY(18)=0.002;
tabSpeakerZ(18)=0.409;
tabSpeakerD(18)=0.818;
tabSpeakerX(19)=-0.506;
tabSpeakerY(19)=0.002;
tabSpeakerZ(19)=0.672;
tabSpeakerD(19)=0.841;
tabSpeakerX(20)=-0.146;
tabSpeakerY(20)=0.002;
tabSpeakerZ(20)=0.677;
tabSpeakerD(20)=0.692;
tabSpeakerX(21)=0.215;
tabSpeakerY(21)=0.002;
tabSpeakerZ(21)=0.692;
tabSpeakerD(21)=0.725;
tabSpeakerX(22)=0.600;
tabSpeakerY(22)=0.002;
tabSpeakerZ(22)=0.702;
tabSpeakerD(22)=0.923;
tabSpeakerX(23)=0.615;
tabSpeakerY(23)=0.002;
tabSpeakerZ(23)=0.258;
tabSpeakerD(23)=0.667;
tabSpeakerX(24)=0.615;
tabSpeakerY(24)=0.002;
tabSpeakerZ(24)=-0.045;
tabSpeakerD(24)=0.616;
tabSpeakerX(25)=0.610;
tabSpeakerY(25)=0.002;
tabSpeakerZ(25)=-0.384;
tabSpeakerD(25)=0.721;
tabSpeakerX(26)=0.111;
tabSpeakerY(26)=0.002;
tabSpeakerZ(26)=-0.409;
tabSpeakerD(26)=0.424;
tabSpeakerX(27)=0.116;
tabSpeakerY(27)=0.412;
tabSpeakerZ(27)=-0.485;
tabSpeakerD(27)=0.647;
tabSpeakerX(28)=-0.254;
tabSpeakerY(28)=0.412;
tabSpeakerZ(28)=-0.571;
tabSpeakerD(28)=0.748;
tabSpeakerX(29)=-0.595;
tabSpeakerY(29)=0.412;
tabSpeakerZ(29)=-0.409;
tabSpeakerD(29)=0.831;
tabSpeakerX(30)=-0.595;
tabSpeakerY(30)=0.412;
tabSpeakerZ(30)=-0.030;
tabSpeakerD(30)=0.724;
tabSpeakerX(31)=-0.570;
tabSpeakerY(31)=0.412;
tabSpeakerZ(31)=0.303;
tabSpeakerD(31)=0.766;
tabSpeakerX(32)=-0.328;
tabSpeakerY(32)=0.412;
tabSpeakerZ(32)=0.404;
tabSpeakerD(32)=0.664;
tabSpeakerX(33)=-0.027;
tabSpeakerY(33)=0.412;
tabSpeakerZ(33)=0.409;
tabSpeakerD(33)=0.581;
tabSpeakerX(34)=0.264;
tabSpeakerY(34)=0.412;
tabSpeakerZ(34)=0.354;
tabSpeakerD(34)=0.604;
tabSpeakerX(35)=0.323;
tabSpeakerY(35)=0.412;
tabSpeakerZ(35)=-0.056;
tabSpeakerD(35)=0.527;
tabSpeakerX(36)=0.151;
tabSpeakerY(36)=0.769;
tabSpeakerZ(36)=-0.237;
tabSpeakerD(36)=0.819;
tabSpeakerX(37)=-0.091;
tabSpeakerY(37)=0.769;
tabSpeakerZ(37)=-0.354;
tabSpeakerD(37)=0.851;
tabSpeakerX(38)=-0.319;
tabSpeakerY(38)=0.769;
tabSpeakerZ(38)=-0.202;
tabSpeakerD(38)=0.857;
tabSpeakerX(39)=-0.314;
tabSpeakerY(39)=0.769;
tabSpeakerZ(39)=0.086;
tabSpeakerD(39)=0.835;
tabSpeakerX(40)=-0.086;
tabSpeakerY(40)=0.769;
tabSpeakerZ(40)=0.247;
tabSpeakerD(40)=0.812;
tabSpeakerX(41)=0.175;
tabSpeakerY(41)=0.769;
tabSpeakerZ(41)=0.091;
tabSpeakerD(41)=0.794;
tabSpeakerX(42)=-0.057;
tabSpeakerY(42)=1.000;
tabSpeakerZ(42)=-0.051;
tabSpeakerD(42)=1.003;
dtencGen(in, out) = sqrt(pow(tabSpeakerX(out)-x(in),2) + pow(tabSpeakerY(out)-y(in),2) + pow(tabSpeakerZ(out)-z(in),2));
hspot = hslider("Hot Spot",-20,-50,0,1);
dgain(in, out) = ba.db2linear((hspot/tabSpeakerD(out))*dtencGen(in,out));
x(i) = hslider("/X%i",0,-1,1,0.01);
y(i) = hslider("/Y%i",0,-1,1,0.01);
z(i) = hslider("/Z%i",0,-1,1,0.01);
Fader(in,out)= vgroup("[1]Input %2in",dgain(in,out));
cdistance=hslider("dt",1,0,1,0.1);

paramDistance(x)=hgroup("[2]Distance",x);
//-----------------------------------------------------------
//                   LPF 
//-----------------------------------------------------------
//minfreq=paramDistance(vslider("LPF Min",100, 20, 2000, 1));
ampfreq=paramDistance(vslider("LPF Amp",5000, 20, 19980, 1));
rpf=ampfreq:floor;
LPF=fi.lowpass(3,rpf);
fbp = checkbox("[0] Bypass  [tooltip: When this is checked, the filters has no effect]");
filter=paramDistance(vgroup("FILTERS",ba.bypass1(fbp,hgroup("[1]",LPF))));

//-----------------------------------------------------------
//                   Pitchshifting
//-----------------------------------------------------------

pwindow=paramDistance(hslider("window (samples)", 1000, 50, 10000, 1));
pxfade=paramDistance(hslider("xfade (samples)", 10, 1, 10000, 1));
pshift=paramDistance(hslider("shift (semitones) ", 0, -12, +12, 0.1));
pbp = checkbox("[0] Bypass  [tooltip: When this is checked, the filters has no effect]");
transpose=paramDistance(vgroup("Transpose",ba.bypass1(pbp,hgroup("[1]",ef.transpose(pwindow,pxfade,pshift)))));


//-----------------------------------------------------------
//                  Delay
//-----------------------------------------------------------
delay_group(x) = paramDistance(vgroup("[2]DELAY", x));
cbp =delay_group(vgroup("[0]",checkbox("Bypass	[tooltip: When this is checked, Delay has no effect]")));
voice   = delay_group(vgroup("[1]",(+ : de.sdelay(N, interp, dtime)) ~ *(fback)));
N = int(2^19);
interp  = hslider("interpolation[unit:ms][style:knob]",10,1,100,0.1)*ma.SR/1000.0;
fback = hslider("feedback[style:knob]",0,0,100,0.1)/100.0;
dtime = hslider("delay[unit:ms][style:knob]", 0, 0, 1000, 0.01)*ma.SR/1000.0;
delay = ba.bypass1(cbp,voice);
//-----------------------------------------------------------
//                 Freeverb
//-----------------------------------------------------------
scaleroom   = 0.28;
offsetroom  = 0.7;
allpassfeed = 0.5;
scaledamp   = 0.4;
fixedgain   = 0.1;
origSR = ma.SR;
g=parameters(vslider("[1] Wet [tooltip: The amount of reverb applied to the signal
		between 0 and 1 with 1 for the maximum amount of reverb.]", 0.3333, 0.3, 1, 0.025));
freeverbMono=_<: (*(g)*fixedgain :re.mono_freeverb(combfeed, allpassfeed, damping, spatSpread)),*(1-g):> _;
parameters(x) = paramDistance(hgroup("[3]Freeverb",x));
knobGroup(x) = parameters(vgroup("[1]",x));
fvbp = knobGroup(checkbox("[0] Bypass	[tooltip: When this is checked, the freeverb	has no effect]"));
damping = knobGroup(vslider("[1] Damp [style: knob] [tooltip: Somehow control the density of the reverb.]",0.5, 0, 1, 0.025)*scaledamp*origSR/ma.SR);
combfeed = knobGroup(vslider("[2] RoomSize [style: knob] [tooltip: The room size	between 0 and 1 with 1 for the largest room.]", 0.5, 0, 1, 0.025)*scaleroom*origSR/ma.SR + offsetroom);
spatSpread = knobGroup(vslider("[3] Stereo Spread [style: knob] [tooltip: Spatial spread between 0 and 1 with 1 for maximum spread.]",0.5,0,1,0.01)*46*ma.SR/origSR: int);
freeverb = ba.bypass1(fvbp,freeverbMono);
};
process = Matrix(1,43); // le deuxième chiffre permet de définir la dimension de votre espace :9,10, ...

